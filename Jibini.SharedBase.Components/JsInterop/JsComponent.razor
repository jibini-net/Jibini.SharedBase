@namespace Jibini.SharedBase.Components
@implements IDisposable
@inject IJSRuntime js
@typeparam TParams
@typeparam TNewData

@* AREA CONTROLED IN JS BY ELEMENT REFERENCE, PASSED TO `init` *@
<div @ref="@Element" style="@Style">@ChildContent</div>

@code {
    /// <summary>
    /// Base content of the component, contained inside of a <c>div</c> with the
    /// generated ID and provided styles applied.
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /// <summary>
    /// Path to the JS file containing the scripts for this control. Usually
    /// this needs to start with <c>./js/</c> to import correctly.
    /// </summary>
    [Parameter]
    public string CompanionScript { get; set; } = "";

    /// <summary>
    /// Styling applied directly to the element container, which can be used to
    /// control the element's size.
    /// </summary>
    [Parameter]
    public string Style { get; set; } = "";

    /// <summary>
    /// Create the params sent on the initial creation of this component. This
    /// would include static config values or initial data for the element.
    /// </summary>
    [Parameter]
    public Func<TParams>? GenerateParams { get; set; }

    /// <summary>
    /// Provide a relationship between the state of the surrounding page and the
    /// set of data accepted by the update script action. This is the exact
    /// object which will be serialized and provided as <c>newData</c>.
    /// 
    /// This could include header and body content, or a list of chart datasets.
    /// </summary>
    [Parameter]
    public Func<TNewData>? GenerateData { get; set; }

    /// <summary>
    /// Reference to the DOM element, if it is currently being displayed.
    /// </summary>
    public ElementReference? Element { get; set; }

    /// <summary>
    /// If set, this is the imported module used to control the component.
    /// </summary>
    public IJSObjectReference? Script { get; private set; }

    /// <summary>
    /// If set, this is an instance of an object which can be used to invoke JS
    /// actions associated with this specific component instance.
    /// </summary>
    public IJSObjectReference? Component { get; private set; }

    private Semaphore initGate = new(1, 1);
    private volatile bool initTicket = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        // Event hook can hire multiple times concurrently, but the call with
        // `firstRender` set to `true` isn't always the first to complete;
        // locking the whole section doesn't work because of async JS interop.
        //
        // Ensures that two calls don't attempt to double claim a canvas, etc.
        var doInit = false;
        initGate.WaitOne();
        try
        {
            doInit = !initTicket;
            initTicket = true;
        } finally
        {
            initGate.Release();
        }

        try
        {
            // Load the script or access the already-loaded module, attempts to run
            // the init JS if it hasn't been
            if (Component is null && doInit)
            {
                Script = await js.InvokeAsync<IJSObjectReference>("import", CompanionScript);
                Component = await Script.InvokeAsync<IJSObjectReference>("init", Element, GenerateParams is null ? null : GenerateParams!());
            }
            // Updates the element with new data if it has been created
            if (Component is not null)
            {
                await Script!.InvokeVoidAsync("update", Component, GenerateData is null ? null : GenerateData!());
            }
        } finally
        {
            initTicket = Component is not null;
        }
    }

    void IDisposable.Dispose()
    {
        if (Component is not null)
        {
            _ = Component.DisposeAsync();
        }
        if (Script is not null)
        {
            _ = Script.DisposeAsync();
        }
    }
}
