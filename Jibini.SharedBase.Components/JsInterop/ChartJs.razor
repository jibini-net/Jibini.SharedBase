@namespace Jibini.SharedBase.Components
@typeparam TData

<JsComponent CompanionScript="./js/interop/ChartJs.js"
    Style="@Style"
    GenerateParams="@_GenerateParams"
    GenerateData="@_GenerateDatasets"
    TParams="Parameters"
    TNewData="IEnumerable<InteropDataset>">

    <canvas style="@CanvasStyle" />

</JsComponent>

@code {
    /// <summary>
    /// A simple dataset, with several of the Chart.js parameters exposed.
    /// </summary>
    public class InteropDataset
    {
        public string Label { get; set; } = "Dataset";
        public string Color { get; set; } = "grey";
        public string BorderColor => Color;
        public string BackgroundColor => Color;
        public List<TData> Data { get; set; } = new();
    }

    /// <summary>
    /// Values which are passed to the chart on initial creation.
    /// </summary>
    public class Parameters
    {
        /// <summary>
        /// To override default configuration, provide the chart type.
        /// </summary>
        [Parameter]
        public string Type { get; set; } = "line";

        /// <summary>
        /// To override default configuration, provide the chart's X-axis label.
        /// </summary>
        [Parameter]
        public string XAxisLabel { get; set; } = "X-axis";

        /// <summary>
        /// To override default configuration, provide the chart's Y-axis label.
        /// </summary>
        [Parameter]
        public string YAxisLabel { get; set; } = "Y-axis";
    }

    /// <summary>
    /// Inline styling applied to the container around the chart.
    /// </summary>
    [Parameter]
    public string Style { get; set; } = "";

    /// <summary>
    /// Inline styling applied to the internal canvas of the chart.
    /// </summary>
    [Parameter]
    public string CanvasStyle { get; set; } = "width: 100%;";

    /// <summary>
    /// Generates the chart datasets after every screen render.
    /// </summary>
    [Parameter]
    public Func<IEnumerable<InteropDataset>>? GenerateDatasets { get; set; }

    /// <summary>
    /// Provide a function to generate the initial chart config with custom content.
    /// </summary>
    [Parameter]
    public Func<Parameters>? GenerateParams { get; set; }

    /// <summary>
    /// Used to coalesce to the default configuration parameters.
    /// </summary>
    private Parameters _GenerateParams() => GenerateParams?.Invoke() ?? new();

    /// <summary>
    /// Used to coalesce to the empty set, to work around compilation warnings.
    /// </summary>
    private List<InteropDataset> _GenerateDatasets() => GenerateDatasets?.Invoke()?.ToList() ?? new();
}