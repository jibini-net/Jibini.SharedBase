@namespace Jibini.SharedBase.Components
@implements IDisposable
@inject IJSRuntime js

@* CANVAS CONTROLED IN JS BY ASSOCIATED ID *@
<canvas id="@Id" style="@Style" />

@code {
    /// <summary>
    /// Path to the JS file containing the scripts for this chart. Usually this
    /// needs to start with <c>./js/</c> to import correctly.
    /// </summary>
    [Parameter]
    public string CompanionScript { get; set; } = "";

    /// <summary>
    /// Singleton object exported by the script used to control this chart.
    /// </summary>
    [Parameter]
    public string CompanionObject { get; set; } = "";

    /// <summary>
    /// Styling applied directly to the chart's canvas, which can be used to
    /// control the chart's size.
    /// </summary>
    [Parameter]
    public string Style { get; set; } = "";

    /// <summary>
    /// Provide a relationship between the state of the surrounding page and the
    /// set of datasets accepted by the update script action. This is the exact
    /// object which will be serialized and provided as <c>newData</c>.
    /// </summary>
    [Parameter]
    public Func<object> GenerateDatasets { get; set; } = (() => new List<object>());

    /// <summary>
    /// Persistent ID of the canvas on the page to use as reference in JS.
    /// </summary>
    public Guid Id { get; } = Guid.NewGuid();

    /// <summary>
    /// If set, this is the Chart.js chart object which can be used to invoke
    /// Chart.js actions.
    /// </summary>
    public IJSObjectReference? Chart { get; private set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        // Load the script or access the already-loaded module
        var script = await js.InvokeAsync<IJSObjectReference>("import", CompanionScript);
        try
        {

            // Attempts to create the chart if it hasn't been
            if (Chart is null)
            {
                Chart = await script.InvokeAsync<IJSObjectReference>($"{CompanionObject}.init", Id);
            }
            // Updates the chart with new data if it has been created
            if (Chart is not null)
            {
                await script.InvokeVoidAsync($"{CompanionObject}.update", Chart, GenerateDatasets());
            }
        } finally
        {
            _ = script.DisposeAsync();
        }
    }

    void IDisposable.Dispose()
    {
        if (Chart is not null)
        {
            _ = Chart.DisposeAsync();
        }
    }
}
