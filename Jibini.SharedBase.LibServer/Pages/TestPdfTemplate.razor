@page "/templates/test-pdf"
@layout TemplateLayout
@namespace Jibini.SharedBase.Server.Pages
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.Common
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.ChartJS.LineChart

<PageTitle>Test PDF Template</PageTitle>

<style>
</style>

@for (int i = 0; i < NUM_CHARTS; i++)
{
    var copy = i;
    
    <div class="row mb-3" style="page-break-inside: avoid;">
        @if (i % 2 == 1)
        {
            <div class="col-4"></div>
        }

        <div class="col-8">

            <div class="p-1 pe-5 border border-dark" style="border-style: dashed !important;">
                <ChartJs.Blazor.Charts.ChartJsLineChart Config="@_config.Value[copy]"
                    Height="220" />
            </div>

        </div>
    </div>
}

@code {
    private const int NUM_CHARTS = 20;

    private Lazy<LineConfig[]> _config = new(() =>
    {
        var results = new LineConfig[NUM_CHARTS];
        for (int i = 0; i < NUM_CHARTS; i++)
            results[i] = GenerateConfig();

        return results;
    });

    private static LineConfig GenerateConfig()
    {
        var result = new LineConfig()
        {
            Options = new()
            {
                Animation = new() { Duration = 0 },
                Legend = new()
                {
                    Display = true,
                    Position = Position.Right,
                    Labels = new() { BoxWidth = 4 }
                },
                MaintainAspectRatio = false,
                Responsive = true,
                ResponsiveAnimationDuration = 0,
                Title = new()
                {
                    Display = true,
                    Text = "Test Graph"
                },
                Scales = new()
                {
                    xAxes = new()
                    {
                        new LinearCartesianAxis()
                        {
                            ScaleLabel = new() { LabelString = "X-axis" }
                        }
                    },
                    yAxes = new()
                    {
                        new LinearCartesianAxis()
                        {
                            ScaleLabel = new() { LabelString = "Y-axis" }
                        }
                    }
                }
            }
        };

        var series = new List<LineDataset<Point>>()
        {
            new()
            {
                BorderColor = "red",
                Label = "Red",
                BorderWidth = 2
            },
            new()
            {
                BorderColor = "orange",
                Label = "Orange",
                BorderWidth = 2
            },
            new()
            {
                BorderColor = "green",
                Label = "Green",
                BorderWidth = 2
            },
        };

        for (int i = 0; i < 3; i++)
        {
            double jog = 0.0;

            for (int x = 0; x < 150; x++)
            {
                series[i].Add(new(x,
                    Math.Sin(((double)x / 150) * 3.14 * 2 + jog / 2) * 50
                        + Math.Cos(jog) * 30
                ));

                jog += Random.Shared.NextDouble() - 0.5;
            }
        }

        foreach (var s in series)
            result.Data.Datasets.Add(s);

        return result;
    }
}