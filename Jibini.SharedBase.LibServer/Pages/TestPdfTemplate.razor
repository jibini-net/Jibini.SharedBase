@page "/templates/test-pdf"
@layout TemplateLayout
@namespace Jibini.SharedBase.Server.Pages
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.Common
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.ChartJS.LineChart

<PageTitle>Test PDF Template</PageTitle>

<div class="row">
    @for (int i = 0; i < NUM_CHARTS; i++)
    {
        var copy = i;

        <div class="col-6">
            <ChartJs.Blazor.Charts.ChartJsLineChart Config="@_config.Value[copy]" />
        </div>
    }
</div>

@code {
    private const int NUM_CHARTS = 20;
    private Lazy<LineConfig[]> _config = new(() =>
    {
        var results = new LineConfig[NUM_CHARTS];
        for (int i = 0; i < NUM_CHARTS; i++)
            results[i] = GenerateConfig();

        return results;
    });

    private static LineConfig GenerateConfig()
    {
        var result = new LineConfig()
        {
            Options = new()
            {
                Animation = new() { Duration = 0 },
                Legend = new()
                {
                    Display = true,
                    Position = Position.Right
                },
                ResponsiveAnimationDuration = 0,
                Title = new() { Text = "Test Graph" },
                Scales = new()
                {
                    xAxes = new()
                    {
                        new LinearCartesianAxis()
                        {
                            ScaleLabel = new() { LabelString = "X-axis" }
                        }
                    },
                    yAxes = new()
                    {
                        new LinearCartesianAxis()
                        {
                            ScaleLabel = new() { LabelString = "Y-axis" }
                        }
                    }
                }
            }
        };

        var series = new List<LineDataset<Point>>()
        {
            new()
            {
                BorderColor = "red",
                Label = "Red",
                BorderWidth = 2
            },
            new()
            {
                BorderColor = "orange",
                Label = "Orange",
                BorderWidth = 2
            },
            new()
            {
                BorderColor = "green",
                Label = "Green",
                BorderWidth = 2
            },
        };

        for (int i = 0; i < 3; i++)
        {
            double jog = 0.0;

            for (int x = 0; x < 150; x++)
            {
                series[i].Add(new(x,
                    Math.Sin(((double)x / 150) * 3.14 * 2) * 50
                        + Math.Cos(jog) * 300
                ));

                jog += Random.Shared.NextDouble() - 0.5;
            }
        }

        foreach (var s in series)
            result.Data.Datasets.Add(s);

        return result;
    }
}