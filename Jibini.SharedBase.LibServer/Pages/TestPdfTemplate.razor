@page "/templates/test-pdf"
@layout TemplateLayout
@namespace Jibini.SharedBase.Server.Pages
@inject IJSRuntime js

<PageTitle>Test PDF Template</PageTitle>

@{
    using var http = new System.Net.Http.HttpClient();
    var titles = new Task<string>[10];
    var messages = new Task<string>[50];

    for (int i = 0; i < titles.Length; i++)
    {
        titles[i] = http.GetStringAsync("https://hipsum.co/api/?type=hipster-centric&sentences=1");
    }
    for (int i = 0; i < messages.Length; i++)
    {
        messages[i] = http.GetStringAsync($"https://hipsum.co/api/?type=hipster-centric&sentences={Random.Shared.Next(2, 8)}");
    }
}

@for (int i = 0; i < NUM_CHARTS; i++)
{
    var copy = i;
    
    <div class="row mb-5" style="page-break-inside: avoid;">
        @if (i % 2 == 1)
        {
            <div class="col-4">

                @{
                    var _t = titles[i % titles.Length];
                    var _m = messages[i % messages.Length];
                    try
                    {
                        _t.Wait();
                        _m.Wait();
                    } catch { }

                    var t = _t.IsCompletedSuccessfully ? _t.Result.ParseTo<List<string>>()!.First() : "API error";
                    var m = _m.IsCompletedSuccessfully ? _m.Result.ParseTo<List<string>>()!.First() : (_m.Exception?.Message ?? "API error");
                }

                <p><strong>@t</strong></p>
                <p>@m</p>

            </div>
        }

        <div class="col-8">

            <div class="p-1 pe-5 border border-dark" style="border-style: dashed !important;">
                
                <ChartJs CompanionScript="./js/test-graph.js"
                    CompanionObject="TestGraph"
                    Style="width: 100%;height: 25rem;"
                    GenerateDatasets="@GenerateDatasets" />

            </div>

        </div>

        @if (i % 2 == 0)
        {
            <div class="col-4">

                @{
                    var _t = titles[i % titles.Length];
                    var _m = messages[i % messages.Length];
                    try
                    {
                        _t.Wait();
                        _m.Wait();
                    } catch { }

                    var t = _t.IsCompletedSuccessfully ? _t.Result.ParseTo<List<string>>()!.First() : "API error";
                    var m = _m.IsCompletedSuccessfully ? _m.Result.ParseTo<List<string>>()!.First() : (_m.Exception?.Message ?? "API error");
                }

                <p><strong>@t</strong></p>
                <p>@m</p>

            </div>
        }
    </div>

    var bound = Random.Shared.Next(1, 20);
    for (int j = 0; j < bound; j++)
    {
        var _m = messages[Random.Shared.Next(0, messages.Length)];
        try
        {
            _m.Wait();
        } catch { }
        
        var m = _m.IsCompletedSuccessfully ? _m.Result.ParseTo<List<string>>()!.First() : (_m.Exception?.Message ?? "API error");
        <p>@m</p>
    }
    <br />
}

@code {
    private const int NUM_CHARTS = 12;

    private readonly Guid guid = Guid.NewGuid();
    private IJSObjectReference? chart;

    public class InteropDataset
    {
        public string Name { get; set; } = "Dataset";
        public string Color { get; set; } = "grey";
        public List<decimal> Series { get; set; } = new();
    }

    private static List<InteropDataset> GenerateDatasets()
    {
        var series = new List<InteropDataset>()
        {
            new()
            {
                Name = "Red",
                Color = "red"
            },
            new()
            {
                Name = "Orange",
                Color = "orange"
            },
            new()
            {
                Name = "Green",
                Color = "green"
            },
        };

        for (int i = 0; i < 3; i++)
        {
            double jog = 0.0;
            for (int x = 0; x < 60; x++)
            {
                series[i].Series.Add((decimal)(Math.Sin(((double)x / 60) * 3.14 * 2 + jog / 2) * 50  + Math.Cos(jog) * 30));
                jog += Random.Shared.NextDouble() - 0.5;
            }
        }
        return series;
    }
}