@page "/"
@namespace Jibini.SharedBase.Server.Pages
@inject NavigationManager nav
@inject IHxMessengerService toast
@inject DownloadService download
@inject ChromiumPdfService chrome
@inject WinnovativePdfService winn

<PageTitle>Index</PageTitle>

<div class="container">

    <HxCard CssClass="p-3 mb-3 bg-secondary shadow-sm">
        <HxCardTitle CssClass="m-0">PDF Renderers</HxCardTitle>
    </HxCard>

    <div class="row mb-2">
        <div class="col-md-6">
            
            <HxCard CssClass="p-3 mb-3">
                <HxCardSubtitle CssClass="mb-3">Chromium</HxCardSubtitle>

                <div class="d-inline-block">
                    <HxButton OnClick="@OnHtmlClickChrome"
                        Icon="@BootstrapIcon.Download"
                        Color="@ThemeColor.Primary">
                        HTML
                    </HxButton>

                    <HxButton OnClick="@OnUriClickChrome"
                        Icon="@BootstrapIcon.Download"
                        Color="@ThemeColor.Secondary">
                        URI
                    </HxButton>
                </div>
            </HxCard>

        </div>
        <div class="col-md-6">
            
            <HxCard CssClass="p-3 mb-3">
                <HxCardSubtitle CssClass="mb-3">Winnovative</HxCardSubtitle>
                
                <div class="d-inline-block">
                    <HxButton OnClick="@OnHtmlClickWinn"
                        Icon="@BootstrapIcon.Download"
                        Color="@ThemeColor.Primary">
                        HTML
                    </HxButton>

                    <HxButton OnClick="@OnUriClickWinn"
                        Icon="@BootstrapIcon.Download"
                        Color="@ThemeColor.Secondary">
                        URI
                    </HxButton>
                </div>
            </HxCard>

        </div>
    </div>

    <HxCard CssClass="p-3 mb-3 bg-secondary shadow-sm">
        <HxCardTitle CssClass="m-0">Another Section</HxCardTitle>
    </HxCard>

</div>

@code {
    private async Task OnHtmlClickChrome()
    {
        try
        {
            using var pdf = await chrome.RenderPdfAsync("<h1>Test</h1><button>Stuff</button>");
            toast.AddInformation("Successfuly created PDF");

            await download.DownloadAsync(pdf, $"HtmlPdf_{DateTime.Now:yyyyMMdd_HHmmss}.pdf");
        }
        catch (Exception ex)
        {
            toast.AddError(ex.Message);
        }
    }

    private async Task OnUriClickChrome()
    {
        try
        {
            var self = nav.BaseUri.JoinUri("templates/test-pdf");

            using var pdf = await chrome.RenderPdfAsync(new Uri(self), additionalDelay: 500);
            toast.AddInformation("Successfuly created PDF");

            await download.DownloadAsync(pdf, $"UriPdf_{DateTime.Now:yyyyMMdd_HHmmss}.pdf");
        }
        catch (Exception ex)
        {
            toast.AddError(ex.Message);
        }
    }

    private async Task OnHtmlClickWinn()
    {
        try
        {
            using var pdf = await winn.RenderPdfAsync("<h1>Test</h1><button>Stuff</button>");
            toast.AddInformation("Successfuly created PDF");

            await download.DownloadAsync(pdf, $"HtmlPdf_{DateTime.Now:yyyyMMdd_HHmmss}.pdf");
        } catch (Exception ex)
        {
            toast.AddError(ex.Message);
        }
    }

    private async Task OnUriClickWinn()
    {
        try
        {
            var self = nav.BaseUri.JoinUri("templates/test-pdf");

            using var pdf = await winn.RenderPdfAsync(new Uri(self), additionalDelay: 500);
            toast.AddWarning("This configuration is known to not work correctly");

            await download.DownloadAsync(pdf, $"UriPdf_{DateTime.Now:yyyyMMdd_HHmmss}.pdf");
        } catch (Exception ex)
        {
            toast.AddError(ex.Message);
        }
    }
}